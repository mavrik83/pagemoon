// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  authUid   String?
  email     String?
  firstName String?
  isAdmin   Boolean?  @default(true)
  lastName  String?
  password  String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  reviews   Review[]
  tags      Tag[]
  themes    Theme[]
  books     Book[]
  article   Article[]

  @@map("users")
}

model Book {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String?
  authors       String?
  isbn          String?
  publisher     String?
  datePublished String?
  edition       String?
  language      String?
  pages         Int?
  synopsis      String?
  binding       String?
  readingAge    String?
  gradeLevel    String?
  coverImage    String?
  coverLink     String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  userId        String?   @db.ObjectId
  user          User?     @relation(fields: [userId], references: [id])
  reviewIds     String[]  @db.ObjectId
  reviews       Review[]
  tagIds        String[]  @db.ObjectId
  tags          Tag[]     @relation(fields: [tagIds], references: [id])
  themeIds      String[]  @db.ObjectId
  themes        Theme[]   @relation(fields: [themeIds], references: [id])
  article       Article[] @relation(fields: [articleIds], references: [id])
  articleIds    String[]  @db.ObjectId

  @@map("books")
}

model Review {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?
  rawContent  Json?
  htmlContent String?
  readTime    Int?
  status      String?   @default("draft")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id])
  bookId      String?   @db.ObjectId
  book        Book?     @relation(fields: [bookId], references: [id])
  tagIds      String[]  @db.ObjectId
  tags        Tag[]     @relation(fields: [tagIds], references: [id])

  @@map("reviews")
}

model Article {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?
  rawContent  Json?
  htmlContent String?
  readTime    Int?
  status      String?   @default("draft")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id])
  bookIds     String[]  @db.ObjectId
  books       Book[]    @relation(fields: [bookIds], references: [id])
  tagIds      String[]  @db.ObjectId
  tags        Tag[]     @relation(fields: [tagIds], references: [id])
  themeIds    String[]  @db.ObjectId
  themes      Theme[]   @relation(fields: [themeIds], references: [id])

  @@map("articles")
}

model Tag {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  reviewIds  String[]  @db.ObjectId
  reviews    Review[]  @relation(fields: [reviewIds], references: [id])
  bookIds    String[]  @db.ObjectId
  books      Book[]    @relation(fields: [bookIds], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @db.ObjectId
  article    Article[] @relation(fields: [articleIds], references: [id])
  articleIds String[]  @db.ObjectId

  @@map("tags")
}

model Theme {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  bookIds    String[]  @db.ObjectId
  books      Book[]    @relation(fields: [bookIds], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @db.ObjectId
  article    Article[] @relation(fields: [articleIds], references: [id])
  articleIds String[]  @db.ObjectId

  @@map("themes")
}
