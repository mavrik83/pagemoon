// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DB_URL")
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authUid   String?
  email     String?
  firstName String?
  isAdmin   Boolean?  @default(true)
  lastName  String?
  password  String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  books     Book[]
  reviews   Review[]
  tags      Tag[]
  themes    Theme[]
  articles  Article[]

  @@map("users")
}

model Book {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String?
  authors       String?
  isbn          String?
  publisher     String?
  datePublished String?
  edition       String?
  language      String?
  pages         Int?
  synopsis      String?
  binding       String?
  readingAge    String?
  gradeLevel    String?
  coverImage    String?
  coverLink     String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  userId        String?   @db.Uuid
  user          User?     @relation(fields: [userId], references: [id])
  reviews       Review[]
  tags          Tag[]
  themes        Theme[]
  article       Article[]

  @@map("books")
}

model Review {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String?
  description String?
  rawContent  Json?     @db.JsonB
  htmlContent String?
  readTime    Int?
  status      String?   @default("draft")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  userId      String?   @db.Uuid
  user        User?     @relation(fields: [userId], references: [id])
  bookId      String?   @db.Uuid
  book        Book?     @relation(fields: [bookId], references: [id])
  tags        Tag[]

  @@map("reviews")
}

model Article {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String?
  description String?
  rawContent  Json?     @db.JsonB
  htmlContent String?
  readTime    Int?
  status      String?   @default("draft")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  userId      String?   @db.Uuid
  user        User?     @relation(fields: [userId], references: [id])
  books       Book[]
  tags        Tag[]
  themes      Theme[]

  @@map("articles")
}

model Tag {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  reviews   Review[]
  books     Book[]
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.Uuid
  article   Article[]

  @@map("tags")
}

model Theme {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  books     Book[]
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.Uuid
  article   Article[]

  @@map("themes")
}
